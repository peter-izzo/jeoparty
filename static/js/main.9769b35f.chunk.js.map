{"version":3,"sources":["Question.js","Board.js","serviceWorker.js","index.js"],"names":["displayAnswer","Question","handleClick","changeClass","state","display","setState","data","bind","fetch","resp","json","this","className","map","el","onClick","category","title","value","question","icon","style","color","answer","Component","Board","Boolean","window","location","hostname","match","library","add","faArrowDown","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mTAwBA,IAAIA,GAAgB,EAwELC,E,kDA3DX,aAAe,IAAD,8BACV,gBAUJC,YAAc,WACV,IAAMC,EAAoC,eAAtB,EAAKC,MAAMC,QAA4B,MAAQ,cACnE,EAAKC,SAAS,CAAED,QAASF,KAXzB,EAAKC,MAAQ,CACbG,KAAM,GACNF,QAAS,eAGT,EAAKH,YAAc,EAAKA,YAAYM,KAAjB,gBAPT,E,kMAkBSC,MAAM,kC,cAAnBC,E,gBACaA,EAAKC,O,OAAlBA,E,OACNC,KAAKN,SAAS,CAAEC,KAAMI,I,qIAIhB,IAAD,OACL,OACI,yBAAKE,UAAU,MACVD,KAAKR,MAAMG,KAAKO,KAAI,SAAAC,GAAE,OACnB,yBAAKF,UAAU,sDAAsDG,aAtCrFhB,GAAiBA,IAuCG,wBAAIa,UAAU,OAAOE,EAAGE,SAASC,OACjC,mCAASH,EAAGI,OACZ,4BAAKJ,EAAGK,UACR,6DAAkC,kBAAC,IAAD,CAAiBC,KAAK,gBACxD,yBAAKR,UAAU,OACfS,MAAO,CAACC,MAAO,EAAKnB,MAAMC,SACtBW,QAAU,EAAKd,aAEf,uCAAaa,EAAGS,OAAhB,e,GAtCLC,aCzBRC,EAND,WACV,OACI,kBAAC,EAAD,O,eCKYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCRNC,IAAQC,IAAIC,KAEZC,IAASC,OAEL,kBAAC,EAAD,MAEDC,SAASC,eAAe,SDmHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9769b35f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './question.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\n//does nothing\r\nlet question;\r\n\r\n//This was just a test function to make sure the async returned\r\n//what I wanted it to\r\nasync function test1() {\r\n    try {\r\n        const resp = await fetch('https://jservice.io/api/random');\r\n        const data = await resp.json();\r\n        console.log(data);\r\n        console.log(\"Question value: \", data[0]['value']);\r\n        console.log(\"The answer is: \", data[0]['answer']);\r\n        console.log(\"Here is the question: \", data[0]['question']);\r\n        question = data[0]['question']\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n\r\n}\r\n\r\nlet displayAnswer = false;\r\n\r\nconst clickToShowAnswer = () => {\r\n    displayAnswer = !displayAnswer\r\n\r\n}\r\n\r\n// function Question() {\r\n//     const [displayAnswer]\r\n// }\r\n\r\n\r\nclass Question extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n        data: [],\r\n        display: 'transparent'\r\n    };\r\n        //binds the handleClick function to state\r\n        this.handleClick = this.handleClick.bind(this)\r\n    }\r\n\r\n    //changes the color of the h4 element when clicked\r\n    handleClick = () => {\r\n        const changeClass = this.state.display == 'transparent' ?  'red' : 'transparent';\r\n        this.setState({ display: changeClass });\r\n    }\r\n\r\n    //after component renders async function is run so info can be displayed\r\n    async componentDidMount() {\r\n        const resp = await fetch('https://jservice.io/api/random');\r\n        const json = await resp.json();\r\n        this.setState({ data: json });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"tc\">\r\n                {this.state.data.map(el => (\r\n                    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\" onClick={clickToShowAnswer()}>\r\n                        <h1 className=\"ttc\">{el.category.title}</h1>\r\n                        <h2>For {el.value}</h2>\r\n                        <h2>{el.question}</h2>\r\n                        <p>Click down here to show answer <FontAwesomeIcon icon=\"arrow-down\" /></p>\r\n                        <div className='poop'\r\n                        style={{color: this.state.display}}\r\n                            onClick= {this.handleClick}\r\n                            >\r\n                            <h3> Who is {el.answer} </h3>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// class QuestionChild extends Component {\r\n//     render() {\r\n//     return (\r\n//       <div\r\n//         className={ this.props.className }\r\n//         onClick={ this.props.toggleClassName }\r\n//       >\r\n//         { this.props.children }\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n\r\nexport default Question;\r\n","import React from 'react';\r\nimport Question from './Question';\r\n//import party_trebek from './images/party_tre'\r\n\r\n\r\nconst Board = () => {\r\n    return (\r\n        <Question />\r\n    );\r\n}\r\n\r\nexport default Board;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport Board from './Board';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faArrowDown } from '@fortawesome/free-solid-svg-icons';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nlibrary.add(faArrowDown)\n\nReactDOM.render(\n\n    <Board />\n    //<App />\n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}